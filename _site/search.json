[
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "library(tidyverse)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "DATA ACQUISITION"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#data-manipulation",
    "href": "content/01_journal/04_data_visualization.html#data-manipulation",
    "title": "Data Visualization",
    "section": "\n3.1 Data Manipulation",
    "text": "3.1 Data Manipulation\n\ncovid_refined_tbl$date &lt;- as.Date(covid_refined_tbl$date)\ncovid_refined_tbl &lt;- covid_refined_tbl %&gt;%\n  na.omit() %&gt;%\n  mutate(month = floor_date(date, unit = \"month\"),\n         day = day(date)) %&gt;% \n  group_by(month) %&gt;%\n  filter(day == max(day))\n\nmillion &lt;- function(x) {\n  paste0(x / 1000000, \"M\")\n}"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#data-visualization",
    "href": "content/01_journal/04_data_visualization.html#data-visualization",
    "title": "Data Visualization",
    "section": "\n3.2 Data Visualization",
    "text": "3.2 Data Visualization\n\nggplot(covid_refined_tbl, aes(x = month, y = total_cases, color = location)) +\n  geom_line() +\n  labs(x = \"Month\", y = \"Cumulative Cases\", color = \"Country\") +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%Y-%m\") +\n  scale_y_continuous(labels = million) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 5)) +\n  labs(title = \"COVID-19 confirmed cases worldwide\")\n\n\n\nPlot showing cumulative cases of COVID-19 worldwide from December 2019 to May 2023"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#data-manipulation-1",
    "href": "content/01_journal/04_data_visualization.html#data-manipulation-1",
    "title": "Data Visualization",
    "section": "\n4.1 Data Manipulation",
    "text": "4.1 Data Manipulation\n\ncovid_geo_tbl &lt;- covid_data_tbl %&gt;%\n  select(location, date, total_cases, total_deaths)\n\ncovid_geo_tbl$date &lt;- as.Date(covid_geo_tbl$date)\ncovid_geo_tbl &lt;- covid_geo_tbl %&gt;%\n  mutate(month = floor_date(date, unit = \"month\"),\n         day = day(date)) %&gt;% \n  group_by(month) %&gt;%\n  arrange(desc(date)) %&gt;%\n  na.omit() %&gt;%\n  filter(date == \"2023-05-17\") %&gt;%\n  mutate(case_fatality = total_deaths * 100/total_cases)\n\n\ncovid_geo_tbl$month &lt;- NULL\ncovid_geo_tbl$day &lt;- NULL\n\nworld_united &lt;- covid_geo_tbl %&gt;%\n  left_join(world, by = c(\"location\" = \"region\"), relationship = \"many-to-many\") %&gt;%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %&gt;%\n  distinct()"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#data-visualization-1",
    "href": "content/01_journal/04_data_visualization.html#data-visualization-1",
    "title": "Data Visualization",
    "section": "\n4.2 Data Visualization",
    "text": "4.2 Data Visualization\n\nggplot(world_united, aes(x = long, y = lat, map_id = location, fill = case_fatality)) +\n  geom_map(map = world, aes(fill = case_fatality, map_id = location, x = long, y = lat), color = \"black\") +\n  scale_fill_gradient(low = \"orange\", high = \"red\", na.value = \"gray\", name = \"Case Fatality Percent\") +\n  labs(title = \"Case Fatality Map\",\n       subtitle = \"as of 2023-05-17\") +\n  theme(axis.text = element_blank(),\n        axis.title = element_blank())\n\n\n\nPlot showing case fatality percentage of countries throughout the world as of 17-05-2023"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "SALES ANALYSIS —-\nThe following is the code to analyze the bike sales based on different location and based on year."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#sales-by-location--",
    "href": "content/01_journal/01_tidyverse.html#sales-by-location--",
    "title": "Tidyverse",
    "section": "\n6.1 Sales by Location —-",
    "text": "6.1 Sales by Location —-\nStep 1 - Manipulate\n\nsales_by_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\ngroup_by(state) %&gt;% \nsummarize(sales = sum(total_price)) %&gt;%\nmutate(revenue = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_loc_tbl\n\nStep 2 - Visualize\n\nsales_by_loc_tbl %&gt;%\nggplot(aes(x = state, y = sales)) +\ngeom_col(fill = \"#2DC6D6\") + \ngeom_label(aes(label = revenue)) + \nscale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))+                 labs(\n    title    = \"Revenue by State\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n[]"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#sales-by-state-and-year--",
    "href": "content/01_journal/01_tidyverse.html#sales-by-state-and-year--",
    "title": "Tidyverse",
    "section": "\n6.2 Sales by State and Year —-",
    "text": "6.2 Sales by State and Year —-\n\nlibrary(lubridate)\n\nStep 1 - Manipulate\n\nsales_by_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\nselect(state, order_date, total_price) %&gt;%\nmutate(year = year(order_date)) %&gt;%\ngroup_by(state, year) %&gt;% \nsummarize(sales = sum(total_price)) %&gt;%\nmutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\nsales_by_year_tbl\n\nStep 2 - Visualize\n\nsales_by_year_tbl %&gt;%\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  geom_col() + # Run up to here to get a stacked bar plot\n  facet_wrap(~ state) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by Year and State\",\n    fill = \"States\" \n  )\n\n["
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#excel--",
    "href": "content/01_journal/01_tidyverse.html#excel--",
    "title": "Tidyverse",
    "section": "\n7.1 Excel —-",
    "text": "7.1 Excel —-\n\nbike_orderlines_wrangled_tbl %&gt;% \nwrite_xlsx(\"content/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#csv--",
    "href": "content/01_journal/01_tidyverse.html#csv--",
    "title": "Tidyverse",
    "section": "\n7.2 CSV —-",
    "text": "7.2 CSV —-\n\nbike_orderlines_wrangled_tbl %&gt;% \nwrite_csv(\"content/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#rds--",
    "href": "content/01_journal/01_tidyverse.html#rds--",
    "title": "Tidyverse",
    "section": "\n7.3 RDS —-",
    "text": "7.3 RDS —-\n\nbike_orderlines_wrangled_tbl %&gt;% \nwrite_rds(\"content/00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#libraries--",
    "href": "content/01_journal/02_data_acquisition.html#libraries--",
    "title": "Data Acquisition",
    "section": "\n1.1 Libraries —-",
    "text": "1.1 Libraries —-\n\nlibrary(tidyverse)\nlibrary(readr)     \nlibrary(xopen)    \nlibrary(glue)     \nlibrary(stringi)   \nlibrary(xml2)\nlibrary(knitr)\nlibrary(rvest)"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#collect-product-categories",
    "href": "content/01_journal/02_data_acquisition.html#collect-product-categories",
    "title": "Data Acquisition",
    "section": "\n1.2 Collect Product Categories",
    "text": "1.2 Collect Product Categories\n\nurl_home          &lt;- \"https://www.rosebikes.com/bikes/mtb/cross-country\"\nxopen(url_home)\nhtml_home         &lt;- read_html(url_home)\n\nbike_category_tbl &lt;- html_home %&gt;%\n  html_nodes(css = \"a.btn.btn--primary.btn--block.catalog-category-bikes__button\") %&gt;%\n  html_attr('href') %&gt;%\n  enframe(name = \"position\", value = \"subdirectory\") %&gt;%\n  mutate(\n    url = glue(\"https://www.rosebikes.com{subdirectory}\")\n  ) %&gt;%\n  distinct(url)\n\n\nkable(head(bike_category_tbl))"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#collect-bike-category-and-price-",
    "href": "content/01_journal/02_data_acquisition.html#collect-bike-category-and-price-",
    "title": "Data Acquisition",
    "section": "\n1.3 Collect Bike Category and Price—-",
    "text": "1.3 Collect Bike Category and Price—-\n\nbike_type_tbl &lt;- tibble()\n\nfor (url in bike_category_tbl$url) {\n  xopen(url)\n  html_bike_type &lt;- read_html(url)\n  \n  model_name &lt;- html_bike_type %&gt;%\n    html_nodes(css = \".catalog-category-model__title\") %&gt;%\n    html_text() \n  \n  \n  price &lt;- html_bike_type %&gt;%\n    html_nodes(css = \".catalog-category-model__price-current-value\") %&gt;%\n    html_text() %&gt;%\n    str_remove_all(\"[^0-9.]\") %&gt;%\n    as.numeric()\n  \n  bike_type_tbl &lt;- bind_rows(bike_type_tbl, tibble(model_name, price)) %&gt;%\n    distinct(model_name, .keep_all = TRUE)\n  \n}\nkable(head(bike_type_tbl))"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#libraries",
    "href": "content/01_journal/02_data_acquisition.html#libraries",
    "title": "Data Acquisition",
    "section": "\n2.1 Libraries",
    "text": "2.1 Libraries\n\nlibrary(dplyr)\nlibrary(httr)\nlibrary(jsonlite)"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#api-key-retrieval",
    "href": "content/01_journal/02_data_acquisition.html#api-key-retrieval",
    "title": "Data Acquisition",
    "section": "\n2.2 API Key Retrieval",
    "text": "2.2 API Key Retrieval\n\napi_key &lt;- Sys.getenv(\"MY_API_KEY\")\nif (is.na(api_key)) {\n  stop(\"API key not found in the .Renviron file.\")\n}"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#open-weather-map-api-url",
    "href": "content/01_journal/02_data_acquisition.html#open-weather-map-api-url",
    "title": "Data Acquisition",
    "section": "\n2.3 Open Weather Map API URL",
    "text": "2.3 Open Weather Map API URL\n\nweather_response &lt;- GET(glue(\"https://api.openweathermap.org/data/2.55/weather?lat=44.34&lon=10.99&appid={api_key}\"))"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#response-extraction",
    "href": "content/01_journal/02_data_acquisition.html#response-extraction",
    "title": "Data Acquisition",
    "section": "\n2.4 Response Extraction",
    "text": "2.4 Response Extraction\n\ncurrent_weather_data &lt;- content(weather_response, as = \"text\")\ncurrent_weather &lt;- fromJSON(current_weather_data)\n\ntemperature_celsius &lt;- round(current_weather$main$temp - 273.15, 2)\nhumidity_percentage &lt;- current_weather$main$humidity\ndescription &lt;- current_weather$weather[[1]]$description"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#data-manipulation",
    "href": "content/01_journal/02_data_acquisition.html#data-manipulation",
    "title": "Data Acquisition",
    "section": "\n2.5 Data Manipulation",
    "text": "2.5 Data Manipulation\n\ncat(\"Current Weather in:\", description, \"\\n\")\ncat(\"Temperature:\", temperature_celsius, \"°C\\n\")\ncat(\"Humidity:\", humidity_percentage, \"%\\n\")"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(vroom)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(lubridate)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#manipulating-the-data",
    "href": "content/01_journal/03_data_wrangling.html#manipulating-the-data",
    "title": "Data Wrangling",
    "section": "\n4.1 Manipulating the data",
    "text": "4.1 Manipulating the data\n\npatent_assignee_dt &lt;- merge(patent_assignee_tbl, assignee_tbl, by.x = \"assignee_id\", by.y = \"id\", all.x = T) %&gt;%\n  filter(type == 2) %&gt;% \n  group_by(organization) %&gt;%\n  summarize(quantity = n()) %&gt;%\n  arrange(desc(quantity))"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#visualizing-the-data",
    "href": "content/01_journal/03_data_wrangling.html#visualizing-the-data",
    "title": "Data Wrangling",
    "section": "\n4.2 Visualizing the data",
    "text": "4.2 Visualizing the data\n\npatent_assignee_dt %&gt;%\n  slice(1:10) %&gt;%\n  ggplot(aes(x=organization, y=quantity)) +\n  geom_label(aes(label = quantity), vjust = -0.2) + \n  geom_col(fill = \"#2DC6D6\") + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+ \n  labs(\n    title    = \"Patents by Top US Companies\",\n    x = \"Top 10 US Companies\", # Override defaults for x and y\n    y = \"Quantity\"\n  )"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#manipulating-the-data-1",
    "href": "content/01_journal/03_data_wrangling.html#manipulating-the-data-1",
    "title": "Data Wrangling",
    "section": "\n5.1 Manipulating the data",
    "text": "5.1 Manipulating the data\n\npatent_dt2 &lt;- patent_tbl %&gt;%\n  left_join(patent_assignee_tbl, by = c(\"id\" = \"patent_id\")) %&gt;%\n  left_join(assignee_tbl, by = c(\"assignee_id\" = \"id\")) %&gt;%\n  filter(type == 2 & date&gt;= \"2014-08-01\" & date&lt;= \"2014-08-31\") %&gt;% \n  group_by(organization) %&gt;%\n  summarise(quantity = n()) %&gt;%\n  ungroup() %&gt;%\n  arrange(desc(quantity))"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#visualizing-the-data-1",
    "href": "content/01_journal/03_data_wrangling.html#visualizing-the-data-1",
    "title": "Data Wrangling",
    "section": "\n5.2 Visualizing the data",
    "text": "5.2 Visualizing the data\n\npatent_dt2 %&gt;%\n  slice(1:10) %&gt;%\n  ggplot(aes(x=organization, y=quantity)) +\n  geom_label(aes(label = quantity), vjust = -0.2) + \n  geom_col(fill = \"#2DC6D6\") + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+ \n  labs(\n    title    = \"Most Patents by Top US Companies in August 2014\",\n    x = \"Top 10 US Companies\", # Override defaults for x and y\n    y = \"Quantity\"\n  )"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#manipulating-the-data-2",
    "href": "content/01_journal/03_data_wrangling.html#manipulating-the-data-2",
    "title": "Data Wrangling",
    "section": "\n6.1 Manipulating the data",
    "text": "6.1 Manipulating the data\n\npatent_dt3 &lt;- patent_assignee_tbl %&gt;%\n  left_join(assignee_tbl, by = c(\"assignee_id\" = \"id\"), relationship = \"many-to-many\") %&gt;%\n  left_join(uspc_tbl, by = c(\"patent_id\" = \"patent_id\"), relationship = \"many-to-many\")\n\ntop_10_companies &lt;- patent_dt3 %&gt;%\n  group_by(organization) %&gt;%\n  summarise(num_patents = n()) %&gt;%\n  top_n(10, num_patents)\n\ntop_5_USPTO &lt;- patent_dt3 %&gt;%\n  filter(organization %in% top_10_companies$organization) %&gt;%\n  group_by(mainclass_id) %&gt;%\n  summarise(num_patents_per_mainclass = n()) %&gt;%\n  na.omit() %&gt;%\n  top_n(5,num_patents_per_mainclass)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#visualizing-the-data-2",
    "href": "content/01_journal/03_data_wrangling.html#visualizing-the-data-2",
    "title": "Data Wrangling",
    "section": "\n6.2 Visualizing the data",
    "text": "6.2 Visualizing the data\n\ntop_5_USPTO %&gt;%\n  ggplot(aes(x=mainclass_id, y=num_patents_per_mainclass)) +\n  geom_label(aes(label = num_patents_per_mainclass), vjust = -0.2) + \n  geom_col(fill = \"#2DC6D6\") + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+ \n  labs(\n    title    = \"Top 5 USPTO Classes by Top 10 Companies\",\n    x = \"Main Class ID\", # Override defaults for x and y\n    y = \"Quantity\"\n  )"
  }
]